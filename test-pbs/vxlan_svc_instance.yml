---

  - name: HP Comware vxlan automation testing
    hosts: hp1
    gather_facts: no
    connection: local


    tasks:

      - name: ensure L2VPN is enabled for testing
        comware_l2vpn_global: state=enabled username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        ignore_errors: true
        register: data
        tags: l2vpn

      # PREP

      # TUNNELS
      - name: ensure tunnel 20 exists for testing
        comware_vxlan_tunnel: tunnel=20 src=10.1.1.1 dest=10.1.1.2 username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: tunnel

      - name: ensure tunnel 21 exists for testing
        comware_vxlan_tunnel: tunnel=21 src=10.1.1.1 dest=10.1.1.2 username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: tunnel

      # CREATE VSI/VXLAN MAPPING AND ASSIGN TUNNELS
      #############################################################

      - name: ensure VXLAN and VSI do not exist to get started
        comware_vxlan: vxlan=100 vsi=VSI_VXLAN_100 tunnels=20 state=absent username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: vxlan

      - name: ensure VXLAN 100 exists and is mapped to VSI VSI_VXLAN_100 with only tunnel interface 20
        comware_vxlan: vxlan=100 vsi=VSI_VXLAN_100 tunnels=20 username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: vxlan

      # CORE TESTS

      ##### MAPPING VXLAN/VSI to ETH Service instance and creating AC
      ###############################################################

      - name: ensure it doesn't exist before starting
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 state=absent username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: map

      - assert:
          that:
            - data.end_state == {}

      - name: iniital deployment of and mapping of vxlan/vsi to eth service instance
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 encap=default access_mode=vlan username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: map

      - assert:
          that:
            - data.changed == true
            - data.end_state.encap == 'default'
            - data.end_state.access_mode == 'vlan'
            - data.end_state.vsi == 'VSI_VXLAN_100'
            - data.end_state.instance == '100'

      - name: remoing config to make a change to encap/mode
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 state=absent username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: map

      - assert:
          that:
            - data.end_state == {}
            - data.changed == true

      - name: updated with new encap and access_mode
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 encap=tagged access_mode=ethernet username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: map

      - assert:
          that:
            - data.changed == true
            - data.end_state.encap == 'tagged'
            - data.end_state.access_mode == 'ethernet'
            - data.end_state.vsi == 'VSI_VXLAN_100'
            - data.end_state.instance == '100'


      - name: removing to make change
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 state=absent username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: map

      - assert:
          that:
            - data.end_state == {}
            - data.changed == true

      - name: testing only-tagged as encap
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 encap=only-tagged vlanid=10 state=present username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: map

      - assert:
          that:
            - data.changed == true
            - data.end_state.encap == 'only-tagged'
            - data.end_state.access_mode == 'vlan'
            - data.end_state.vlanid == '10'
            - data.end_state.vsi == 'VSI_VXLAN_100'
            - data.end_state.instance == '100'

      - name: removing to make change
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 state=absent username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: map

      - assert:
          that:
            - data.end_state == {}
            - data.changed == true


      - name: testing encap is default and access_mode is vlan
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 encap=default access_mode=vlan username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: map

      - assert:
          that:
            - data.changed == true
            - data.end_state.encap == 'default'
            - data.end_state.access_mode == 'vlan'
            - data.end_state.vsi == 'VSI_VXLAN_100'
            - data.end_state.instance == '100'

      - name: removing to make change
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 state=absent username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: map

      - assert:
          that:
            - data.end_state == {}
            - data.changed == true

      ##### FAILURE TESTS

      ##### VERIFY FAIL OCCURS WHEN L2VPN IS NOT ENABLED

      - name: ensure L2VPN is disabled to run failure test
        comware_l2vpn_global: state=disabled username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: f1

      - name: ensure L2VPN needs to be enabled
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 encap=default access_mode=vlan username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        ignore_errors: true
        tags: f1

      - assert:
          that:
            - data.failed == true
        tags: f1

      - name: enabling L2VPN
        comware_l2vpn_global: state=enabled username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: f1

      #### VERIFY FAIL OCCURS WHEN INTERFACE IS A L3 PORT

      - name: config port to be L3
        comware_interface: name=Fo1/0/32 type=routed username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: f2

      - name: ensuring the interface needs to be a L2 port
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 encap=default access_mode=vlan username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        ignore_errors: true
        tags: f2

      - assert:
          that:
            - data.failed == true
        tags: f2

      - name: ensure interface is back to L2
        comware_interface: name=Fo1/0/32 type=bridged username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: f2

      #### VERIFY FAIL OCCURS WHEN VSI IS NOT YET CREATED

      - name: removing VSI and VXLAN mapping
        comware_vxlan: vxlan=100 vsi=VSI_VXLAN_100 state=absent username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: f3

      - name: ensuring fail when VSI is not created
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 encap=default access_mode=vlan username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        ignore_errors: true
        tags: f3

      - assert:
          that:
            - data.failed == true
        tags: f3

      ##### VERIFY FAIL OCCOURS SINCE ENCAP CANNOT BE CHANGED UNLESS IT'S REMOVED FIRST (STATE=ABSENT)

      - name: ensure VXLAN and VSI exist again
        comware_vxlan: vxlan=100 vsi=VSI_VXLAN_100 state=present username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: f4

      - name: ensure service instance is in a configured stated
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 encap=tagged access_mode=ethernet username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        tags: f4


      - name: ensure that encap can only be changed by removing it first
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 encap=only-tagged vlanid=10 state=present username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        ignore_errors: true
        tags: f4

      - assert:
          that:
            - data.failed == true
        tags: f4

      #### VERIFY FAIL OCCURS SINCE ACCESS_MODE CAN NOT BE CHANGED UNLESS IT'S REMOVED FIRST (STATE=ABSENT)

      - name: ensure access_mode can only be changed by removing it first
        comware_vxlan_svc_instance: interface=Fo1/0/32 vsi=VSI_VXLAN_100 instance=100 encap=tagged access_mode=vlan username={{ username }} password={{ password }} hostname={{ inventory_hostname }}
        register: data
        ignore_errors: true
        tags: f5

      - assert:
          that:
            - data.failed == true
        tags: f5
